-- 
-- (DRAFT!)
-- Table with UserIDs
-- 
-- Overview:
-- ---------
--    (A) Required Types
--    (B) Table auth.users
--    (C) Triggers for auth.users
--    (D) Other Functions for auth.users
-- 


-- -----------------------------------------------------------------------
-- (A) REQUIRED TYPES
-- -----------------------------------------------------------------------


-- 
-- auth.username_t (type check)
-- 
-- USAGE:
--    SELECT 'coolname123'::auth.username_t;  -- Ok
--    SELECT 'no#pe'::auth.username_t; -- Fails
-- 
-- BEHAVIOR
--    SELECT 'Capital'::auth.username_t = 'capital'::auth.username_t; -- True
--  
DROP DOMAIN IF EXISTS auth.username_t;
CREATE DOMAIN auth.username_t AS citext
  CHECK ( value ~ '^[a-zA-Z0-9]+$' )
;


-- 
-- auth.user_lifecycle_t (type check)
-- Sign Up Stages
-- 
CREATE TYPE 
auth.user_lifecycle_t 
as ENUM(
  'user_id-created', 
  'username-exists', 
  'email-exists', 
  'account-deactivated', 
  'account-deletion-pending', 
  'account-deleted'
);


-- -----------------------------------------------------------------------
-- (B) TABLE auth.users
-- -----------------------------------------------------------------------

-- delete table
-- DROP TABLE IF EXISTS  auth.users;

-- setup the table again
CREATE TABLE
IF NOT EXISTS
auth.users (
  -- automatic immutable fields
    user_id        uuid DEFAULT uuid_generate_v4()
  , created_at     timestamp NOT NULL default CURRENT_TIMESTAMP
  , created_by     text NOT NULL default CURRENT_USER
  -- immutable fields
  , username       auth.username_t NOT NULL
  -- might change over the lifetime of an user
  , account_state  auth.user_lifecycle_t DEFAULT 'user_id-created'
  -- , user_settings  JSONB NOT NULL
  -- , prev_settings  JSONB NOT NULL
  , PRIMARY KEY(user_id)
  , UNIQUE(username)
);

COMMENT ON COLUMN auth.users.user_id 
  IS 'Autogenerated USER ID that is referenced in other tables.'
;
COMMENT ON COLUMN auth.localpw.username
  IS 'The unique immutable username for authentification purposes. It is not possible to change the username lateron.'
;



-- -----------------------------------------------------------------------
-- (C) TRIGGERS for auth.users
--    - Prevent row DELETE
--    - Prevent UPDATE on user_id, created_at, created_by, username
-- -----------------------------------------------------------------------

-- 
-- Utility Function
-- - Raise an exception in a statement level trigger
-- - row level trigger functions are working as well
-- 
CREATE OR REPLACE FUNCTION auth.utils_raise_exception()
  RETURNS TRIGGER AS
$$
DECLARE
  errmsg text;
BEGIN
  errmsg := TG_ARGV[0];
  RAISE EXCEPTION '%s', errmsg;
END;
$$ 
LANGUAGE plpgsql
;


-- 
-- Prevent row DELETE (statement level trigger)
-- - it's not allowed to delete Users at all
-- - please change the auth.users.account_state field instead
-- 
DROP TRIGGER IF EXISTS auth.users_prevent_deletion ON auth.users
;
CREATE TRIGGER auth.users_prevent_deletion
  BEFORE DELETE 
    ON auth.users 
  FOR EACH STATEMENT auth.utils_raise_exception(
    'DELETE on auth.users is forbidden.')
;


-- 
-- Prevent UPDATE on user_id, created_at, created_by, username
-- - these fields are immutable
-- 
DROP TRIGGER IF EXISTS auth.users_prevent_update_user_id ON auth.users
;
CREATE TRIGGER auth.users_prevent_update_user_id
  BEFORE UPDATE 
    OF user_id ON auth.users
  FOR EACH STATEMENT auth.utils_raise_exception(
    'UPDATE of auth.users.user_id is forbidden.')
;

DROP TRIGGER IF EXISTS auth.users_prevent_update_created_at ON auth.users
;
CREATE TRIGGER auth.users_prevent_update_created_at
  BEFORE UPDATE 
    OF created_at ON auth.users
  FOR EACH STATEMENT auth.utils_raise_exception(
    'UPDATE of auth.users.created_at is forbidden.')
;

DROP TRIGGER IF EXISTS auth.users_prevent_update_created_by ON auth.users
;
CREATE TRIGGER auth.users_prevent_update_created_by
  BEFORE UPDATE 
    OF created_by ON auth.users
  FOR EACH STATEMENT auth.utils_raise_exception(
    'UPDATE of auth.users.created_by is forbidden.')
;

DROP TRIGGER IF EXISTS auth.users_prevent_update_username ON auth.users
;
CREATE TRIGGER auth.users_prevent_update_username
  BEFORE UPDATE 
    OF username ON auth.users
  FOR EACH STATEMENT auth.utils_raise_exception(
    'UPDATE of auth.users.username is forbidden.')
;


-- -----------------------------------------------------------------------
-- (D) FUNCTIONS for auth.users
--    - Add new user
--    - Change account state
-- -----------------------------------------------------------------------

-- test it
SELECT * FROM auth.users;
DELETE FROM auth.users WHERE user_id in (SELECT user_id FROM auth.users LIMIT 1);


-- 
-- insert some mock up data
-- e.g. list of previous user handles (nicknames).
-- 
INSERT INTO auth.users(user_settings)
VALUES ('{"created_by": "bofh@nowhere.com", "created_at": "howto automagic dates" }'::jsonb);
